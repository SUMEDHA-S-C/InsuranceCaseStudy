//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insurance.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InsuranceEntities : DbContext
    {
        public InsuranceEntities()
            : base("name=InsuranceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_participants> tbl_participants { get; set; }
        public virtual DbSet<tbl_participantType> tbl_participantType { get; set; }
        public virtual DbSet<tbl_policies> tbl_policies { get; set; }
        public virtual DbSet<tbl_policyType> tbl_policyType { get; set; }
    
        public virtual int usp_addParticipant(string firstname, string lastname, string middlename, Nullable<System.DateTime> dob, Nullable<int> participantTypeNo)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var participantTypeNoParameter = participantTypeNo.HasValue ?
                new ObjectParameter("participantTypeNo", participantTypeNo) :
                new ObjectParameter("participantTypeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_addParticipant", firstnameParameter, lastnameParameter, middlenameParameter, dobParameter, participantTypeNoParameter);
        }
    
        public virtual int USP_POLOCIES(Nullable<int> policyno, string planno, Nullable<double> installement, string insured, Nullable<double> assured, string status, string mode, Nullable<System.DateTime> due, string benfit, string action)
        {
            var policynoParameter = policyno.HasValue ?
                new ObjectParameter("policyno", policyno) :
                new ObjectParameter("policyno", typeof(int));
    
            var plannoParameter = planno != null ?
                new ObjectParameter("planno", planno) :
                new ObjectParameter("planno", typeof(string));
    
            var installementParameter = installement.HasValue ?
                new ObjectParameter("installement", installement) :
                new ObjectParameter("installement", typeof(double));
    
            var insuredParameter = insured != null ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(string));
    
            var assuredParameter = assured.HasValue ?
                new ObjectParameter("assured", assured) :
                new ObjectParameter("assured", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var dueParameter = due.HasValue ?
                new ObjectParameter("due", due) :
                new ObjectParameter("due", typeof(System.DateTime));
    
            var benfitParameter = benfit != null ?
                new ObjectParameter("benfit", benfit) :
                new ObjectParameter("benfit", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_POLOCIES", policynoParameter, plannoParameter, installementParameter, insuredParameter, assuredParameter, statusParameter, modeParameter, dueParameter, benfitParameter, actionParameter);
        }
    
        public virtual int usp_updateParticipantDetails(string firstname, string lastname, string middlename, Nullable<System.DateTime> dob, Nullable<int> id)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_updateParticipantDetails", firstnameParameter, lastnameParameter, middlenameParameter, dobParameter, idParameter);
        }
    
        public virtual int usp_viewParticipant()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_viewParticipant");
        }
    
        public virtual ObjectResult<string> usp_beneficiary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_beneficiary");
        }
    
        public virtual ObjectResult<string> usp_insured()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_insured");
        }
    
        public virtual ObjectResult<string> usp_owner()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_owner");
        }
    
        public virtual ObjectResult<usp_createPolicies_Result> usp_createPolicies(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_createPolicies_Result>("usp_createPolicies", idParameter);
        }
    
        public virtual int usp_deletePolicies(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_deletePolicies", idParameter);
        }
    
        public virtual ObjectResult<usp_getPolicies_Result> usp_getPolicies(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPolicies_Result>("usp_getPolicies", idParameter);
        }
    
        public virtual int usp_addPolicies(Nullable<int> policyno, Nullable<int> planno, Nullable<double> installement, string insured, Nullable<double> sumassured, string policystatus, string premiummode, Nullable<System.DateTime> premiumduedate, string benfitiary, string owner, string policyterm)
        {
            var policynoParameter = policyno.HasValue ?
                new ObjectParameter("policyno", policyno) :
                new ObjectParameter("policyno", typeof(int));
    
            var plannoParameter = planno.HasValue ?
                new ObjectParameter("planno", planno) :
                new ObjectParameter("planno", typeof(int));
    
            var installementParameter = installement.HasValue ?
                new ObjectParameter("installement", installement) :
                new ObjectParameter("installement", typeof(double));
    
            var insuredParameter = insured != null ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(string));
    
            var sumassuredParameter = sumassured.HasValue ?
                new ObjectParameter("sumassured", sumassured) :
                new ObjectParameter("sumassured", typeof(double));
    
            var policystatusParameter = policystatus != null ?
                new ObjectParameter("policystatus", policystatus) :
                new ObjectParameter("policystatus", typeof(string));
    
            var premiummodeParameter = premiummode != null ?
                new ObjectParameter("premiummode", premiummode) :
                new ObjectParameter("premiummode", typeof(string));
    
            var premiumduedateParameter = premiumduedate.HasValue ?
                new ObjectParameter("premiumduedate", premiumduedate) :
                new ObjectParameter("premiumduedate", typeof(System.DateTime));
    
            var benfitiaryParameter = benfitiary != null ?
                new ObjectParameter("benfitiary", benfitiary) :
                new ObjectParameter("benfitiary", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var policytermParameter = policyterm != null ?
                new ObjectParameter("policyterm", policyterm) :
                new ObjectParameter("policyterm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_addPolicies", policynoParameter, plannoParameter, installementParameter, insuredParameter, sumassuredParameter, policystatusParameter, premiummodeParameter, premiumduedateParameter, benfitiaryParameter, ownerParameter, policytermParameter);
        }
    
        public virtual int usp_deletePolicy(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_deletePolicy", idParameter);
        }
    
        public virtual ObjectResult<usp_getPolicyById_Result> usp_getPolicyById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPolicyById_Result>("usp_getPolicyById", idParameter);
        }
    
        public virtual int usp_updatePolicies(Nullable<int> policyno, Nullable<int> planno, Nullable<double> installement, string insured, Nullable<double> sumassured, string policystatus, string premiummode, Nullable<System.DateTime> premiumduedate, string benfitiary, string owner, string policyterm)
        {
            var policynoParameter = policyno.HasValue ?
                new ObjectParameter("policyno", policyno) :
                new ObjectParameter("policyno", typeof(int));
    
            var plannoParameter = planno.HasValue ?
                new ObjectParameter("planno", planno) :
                new ObjectParameter("planno", typeof(int));
    
            var installementParameter = installement.HasValue ?
                new ObjectParameter("installement", installement) :
                new ObjectParameter("installement", typeof(double));
    
            var insuredParameter = insured != null ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(string));
    
            var sumassuredParameter = sumassured.HasValue ?
                new ObjectParameter("sumassured", sumassured) :
                new ObjectParameter("sumassured", typeof(double));
    
            var policystatusParameter = policystatus != null ?
                new ObjectParameter("policystatus", policystatus) :
                new ObjectParameter("policystatus", typeof(string));
    
            var premiummodeParameter = premiummode != null ?
                new ObjectParameter("premiummode", premiummode) :
                new ObjectParameter("premiummode", typeof(string));
    
            var premiumduedateParameter = premiumduedate.HasValue ?
                new ObjectParameter("premiumduedate", premiumduedate) :
                new ObjectParameter("premiumduedate", typeof(System.DateTime));
    
            var benfitiaryParameter = benfitiary != null ?
                new ObjectParameter("benfitiary", benfitiary) :
                new ObjectParameter("benfitiary", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var policytermParameter = policyterm != null ?
                new ObjectParameter("policyterm", policyterm) :
                new ObjectParameter("policyterm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_updatePolicies", policynoParameter, plannoParameter, installementParameter, insuredParameter, sumassuredParameter, policystatusParameter, premiummodeParameter, premiumduedateParameter, benfitiaryParameter, ownerParameter, policytermParameter);
        }
    }
}
